import pytest
import numpy as np
from random import randrange, random
from utilities import assert_matrix_equals, assert_delta, gen_matrix

# test that assert_delta throws no error for 2 similar values
def test_assert_delta_1():
    a = random()
    assert_delta(a, a + 0.00019*(random()-0.5), delta=0.0001)
    
# test assert delta throws assertion error for non similar values
def test_assert_delta_2():
    a = random()
    with pytest.raises(AssertionError):
        assert_delta(a, a + randrange(1, 100))



# test that assert_matrix_equals throws an AssertError for unequal matrices
def test_assert_matrix_equals_1():
    A = gen_matrix(100, 100)
    B = A - randrange(1, 500)
    
    with pytest.raises(AssertionError):
        assert_matrix_equals(A, B)

# test there is no error for equal matrices
def test_assert_matrix_equals_2():
    dims = randrange(1, 100), randrange(1, 100)
    A = np.random.random_sample(dims)
    assert_matrix_equals(A, A)
    
# check it throws ValueError for matrices of different dimensions
def test_assert_matrix_equals_3():
    dims_a = randrange(1, 50), randrange(1, 50)
    dims_b = randrange(50, 100), randrange(50, 100)
    A = np.random.random_sample(dims_a)
    B = np.random.random_sample(dims_b)
    
    with pytest.raises(ValueError):
        assert_matrix_equals(A, B)

# check it throws ValueError for matrices for non 2 dimensional matrices
def test_assert_matrix_equals_4():
    dims = randrange(1, 100), randrange(1, 100), randrange(1, 100)
    A = np.random.random_sample(dims)

    with pytest.raises(ValueError):
        assert_matrix_equals(A, A)



# with no extra parameters, generates a 2d matrix  with dimensions in range
def test_gen_matrix_1():
    height_max = randrange(2, 100) # max needs to be at least 2 so randrange(1, max) is not empty
    width_max = randrange(2, 100)
    A = gen_matrix(height_max, width_max)
    assert len(A.shape) == 2, "Matrix is not 2 dimnesional"
    assert A.shape[0] < height_max and A.shape[1] < width_max, "Dimensions out of range"

# throws ValueError if both square and non_square are true
def test_gen_matrix_2():
    with pytest.raises(ValueError):
        gen_matrix(randrange(2, 100), randrange(2, 100), square=True, non_square=True)
    
# with square = True both the dimensions are equal
def test_gen_matrix_3():
    d = randrange(2, 100)
    A = gen_matrix(d, d, square=True)
    assert A.shape[0] == A.shape[1], "A is not a square matrix"
    
# with square = True throws a ValueError if the two max dimesions are different
def test_gen_matrix_4():
    a = randrange(2, 100)
    b = randrange(2, 100)
    while a == b:
        b = randrange(2, 100)
    with pytest.raises(ValueError):
        gen_matrix(a, b, square=True)

# with non_square = True both dimensions are unequal
# note it's likely that a non-square matrix to be generated by chance
# so this needs to be tested with more cases
def test_gen_matrix_5():
    A = gen_matrix(randrange(2, 10), randrange(2, 10), non_square=True)
    assert A.shape[0] != A.shape[1], "A is a square matrix"
        
# with non_singular and square generates a non singular matrix    
def test_gen_matrix_6():
    d = randrange(2, 100)
    A = gen_matrix(d, d, square=True, non_singular=True)
    assert np.linalg.matrix_rank(A) == A.shape[0], "A is singular"
    
# throws ValueError when non_singular is true but square is false
def test_gen_matrix_7():
    with pytest.raises(ValueError):
        gen_matrix(randrange(2, 100), randrange(2, 100), non_singular=True)
    
    
if __name__ == '__main__':
    pytest.main()