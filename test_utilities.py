import pytest
import numpy as np
from random import randrange, random
from utilities import assert_matrix_equals, assert_delta, gen_matrix

# test that assert_delta throws no error for 2 similar values
@pytest.mark.parametrize("x", range(100)) # this makes pytest run the test 100 times
def test_assert_delta_1(x):
    a = random()
    b = a + 0.00019*(random()-0.5)
    assert_delta(a, b, delta=0.0001)
    return "{} = {} within a delta of .0001".format(a, b)
    
# test assert delta throws assertion error for non similar values
@pytest.mark.parametrize("x", range(100))
def test_assert_delta_2(x):
    a = random()
    b = a + randrange(1, 100)
    with pytest.raises(AssertionError):
        assert_delta(a, a + b)
    return "{} != {} within a delta of .0001".format(a, b)
    



# test that assert_matrix_equals throws an AssertError for unequal matrices
@pytest.mark.parametrize("x", range(100))
def test_assert_matrix_equals_1(x):
    A = gen_matrix(100, 100)
    B = A - randrange(1, 500)
    
    with pytest.raises(AssertionError):
        assert_matrix_equals(A, B)

# test there is no error for equal matrices
@pytest.mark.parametrize("x", range(100))
def test_assert_matrix_equals_2(x):
    dims = randrange(1, 100), randrange(1, 100)
    A = np.random.random_sample(dims)
    assert_matrix_equals(A, A)
    
# check it throws ValueError for matrices of different dimensions
@pytest.mark.parametrize("x", range(100))
def test_assert_matrix_equals_3(x):
    dims_a = randrange(1, 50), randrange(1, 50)
    dims_b = randrange(50, 100), randrange(50, 100)
    A = np.random.random_sample(dims_a)
    B = np.random.random_sample(dims_b)
    
    with pytest.raises(ValueError):
        assert_matrix_equals(A, B)
    return "A matrix of shape {} is not equal to matrix of shape {}".format(A.shape, B.shape)

# check it throws ValueError for matrices for non 2 dimensional matrices
@pytest.mark.parametrize("x", range(100))
def test_assert_matrix_equals_4(x):
    dims = randrange(1, 100), randrange(1, 100), randrange(1, 100)
    A = np.random.random_sample(dims)

    with pytest.raises(ValueError):
        assert_matrix_equals(A, A)
    return "A matrix with shape of {} is invalid input".format(A.shape)



# with no extra parameters, generates a 2d matrix  with dimensions in range
@pytest.mark.parametrize("x", range(100))
def test_gen_matrix_1(x):
    height_max = randrange(2, 100) # max needs to be at least 2 so randrange(1, max) is not empty
    width_max = randrange(2, 100)
    A = gen_matrix(height_max, width_max)
    assert len(A.shape) == 2, "Matrix is not 2 dimnesional"
    assert A.shape[0] <= height_max and A.shape[1] <= width_max, "Dimensions out of range"
    return "gen_matrix({}, {}) gave a matrix of dimensions {}".format(height_max, width_max, A.shape)

# generates a random matrix with each entry between -1 and 1
@pytest.mark.parametrize("x", range(100))
def test_gen_matrix_2(x):
    height_max = randrange(2, 100)
    width_max = randrange(2, 100)
    A = gen_matrix(height_max, width_max)
    assert np.all(-1 <= A) and np.all(A <= 1), "Entry values are out of range"

# throws ValueError if both square and non_square are true
@pytest.mark.parametrize("x", range(100))
def test_gen_matrix_3(x):
    with pytest.raises(ValueError):
        gen_matrix(randrange(2, 100), randrange(2, 100), square=True, non_square=True)
    
# with square = True both the dimensions are equal
@pytest.mark.parametrize("x", range(100))
def test_gen_matrix_4(x):
    d = randrange(2, 100)
    A = gen_matrix(d, d, square=True)
    assert A.shape[0] == A.shape[1], "A is not a square matrix"
    
# with square = True throws a ValueError if the two max dimesions are different
@pytest.mark.parametrize("x", range(100))
def test_gen_matrix_5(x):
    a = randrange(2, 100)
    b = randrange(2, 100)
    while a == b:
        b = randrange(2, 100)
    with pytest.raises(ValueError):
        gen_matrix(a, b, square=True)

# with non_square = True both dimensions are unequal
# note it's likely that a non-square matrix is generated by chance
# so this needs to be tested with more cases
@pytest.mark.parametrize("x", range(100))
def test_gen_matrix_6(x):
    # needs to be at least 3 because 2x2 is the only possible matrix with max 2 dimensions
    A = gen_matrix(randrange(3, 10), randrange(3, 10), non_square=True)
    assert A.shape[0] != A.shape[1], "A is a square matrix"
        
# with non_singular and square generates a non singular matrix    
@pytest.mark.parametrize("x", range(100))
def test_gen_matrix_7(x):
    d = randrange(2, 100)
    A = gen_matrix(d, d, square=True, non_singular=True)
    assert np.linalg.matrix_rank(A) == A.shape[0], "A is singular"

# with non_singular=True generates a non_singular matrix, including for rectangular matrices
@pytest.mark.parametrize("x", range(100))
def test_gen_matrix_8(x):
    A = gen_matrix(randrange(2, 100), randrange(2, 100), non_singular=True)
    rank = np.linalg.matrix_rank(A)
    assert rank == min(A.shape), "A is singular"
    return """rank of matrix A is {} = the smallest value of A's shape {}
so the matrix is non singular and the test passes""".format(rank, A.shape)
    
    
if __name__ == '__main__':
    pytest.main()